Title: Configuration
ENamespace: Opl\Autoloader\Toolset
Stability: beta
VersionSince: 3.0.3.0

----

The OPA toolset uses a common configuration file format. The configuration file is an XML document with the following structure:

~~~~
[xml]
<?xml version="1.0" encoding="UTF-8"?>
<autoload>
	<file-header><![CDATA[
<?php
/**
 * The index.php beginning
 */
]]></file-header>
	<file-footer><![CDATA[
$application = new Application();
$application->start();
	]]></file-footer>

	<export-files>
		<file type="serialized-class-map">./data/classMap.txt</file>
		<file type="chdb-class-map">./data/classMap.chdb</file>
		<file type="core-dump">./data/coreDump.txt</file>
		<file type="core-export">./web/core.php</file>

		<file type="index">./web/index.php</file>
		<file type="cli">./cli/cli.php</file>
	</export-files>

	<separator value="\">
		<namespace name="Opl">./src/Opl</namespace>
		<namespace name="Symfony">./src/Symfony</namespace>
		<namespace name="Doctrine\DBAL">./src/DBAL</namespace>
		<namespace name="Doctrine\ORM" extension=".php5">./src/ORM</namespace>
	</separator>
	
	<separator value="_">
		<namespace name="Zend">./src/Zend</namespace>
	</separator>
</autoload>
~~~~

Tag reference:

`<autoload>`
:	The main document tag.

`<file-header>`
:	Defines the file header for the scaffolding tool. It is pasted before the autoloader setup code.

`<file-footer>`
:	Defines the file footer for the scaffolding tool. It is pasted after the autoloader setup code.

`<export-files>`
:	This section contains paths to different files that might be generated by the toolset.

`<file>`
:	Defines a single file used by the toolset. It has one required attribute: `type` which allows to specify an unique name for the defined path.

`<separator>`
:	Defines a new namespace separator. The `value` attribute is required and defines the namespace separation string. Typically, we would want to have the default PHP namespace separator: `\`, and sometimes also `_` to support the legacy code.

`<namespace>`
:	Defines a single namespace within the given separator and the path to it. The same namespace might be defined for different separators. Note that some tools (i.e. *class map builder*) might have problems with distinguishing the namespaces defined within different separators unless we append the separator to them, i.e. `Zend\` and `Zend_`. `name` is the required attribute, and `extension` is optional. It is used to define the non-standard file extension for the namespace.

Handling sub-namespaces
=======================

We are allowed to define both top-level namespaces and subnamespaces in the configuration file. All the tools are required to handle the subnamespaces correctly. However, not all of the autoloaders support them, and the scaffolding tool uses the information about subnamespaces to select the one that handles them.

File types
==========

The following file types are considered as special:

* `serialized-class-map` - path to the serialized class map used by `ClassMapLoader` and `ApcLoader`.
* `chdb-class-map` - path to the chdb memory-mapped file with the class map used by `ChdbLoader`. Note that this class map format is not portable among different operating systems!
* `core-dump` - path to the file with the application core dump generated by `CoreTracker`.
* `core-export` - path to the PHP file, where the `CoreDump` tool exports the data from the core dump.

The other file types are used by the scaffolding tool.

Class reference
===============

The `Opl\Autoloader\Toolset\Configuration` class reads the OPA configuration files:

~~~~
[php]
$config = new Opl\Autoloader\Toolset\Configuration('./config.xml');

if($config->hasSimpleNamespacesOnly())
{
	echo 'No subnamespaces defined.';
}
echo $config->getFile('index');
~~~~

Method reference:

`__construct($filename)`
:	Reads the configuration file. Might throw `FileNotFoundException` and `FileFormatException` exceptions.

`getSeparators()`
:	Returns the list of the defined separators.

`getSeparatorNamespaces($separator)`
:	Returns the namespaces defined for the given separator. The namespace list is an associative array, and each namespace definition consists of two keys: `path` and `extension`.

`getFiles($filterSpecial = false)`
:	Returns the associative array of all the defined files. If the optional argument is set to true, the array does not contain the special file types.

`getFile($type)`
:	Returns the path to the given file type. If the type is not defined, an exception is thrown.

`hasFile($type)`
:	Returns **true**, if the given file type is defined.

`getFileHeader()`
:	Returns the file header. If the configuration does not contain the `<file-header>` tag, it returns `<?php`

`getFileFooter()`
:	Returns the file footer. If the configuration does not contain the `<file-footer>` tag, it returns **null**.

`hasSimpleNamespacesOnly()`
:	Returns **true**, if the configuration file does not have any subnamespaces defined.