Title: CoreDump
ENamespace: Opl\Autoloader\Toolset
EExtends: Opl\Autoloader\Toolset\AbstractTool
Stability: beta
VersionSince: 3.0.3.0
SeeAlso:
 - autoloader.core-tracker

----

The `Opl\Autoloader\Toolset\CoreDump` class manipulates the application code, using the information generated by the `CoreTracker`. Currently, two forms of manipulation are supported:

* generate the list of `require` instructions that load the application core explicitely,
* concatenate the files containing the application core into a single PHP file.

Both of the manipulations allow to improve the performance by skipping the autoloading process for the classes, interfaces and traits that are needed in every HTTP request to our application. The concatenation reduces also the number of disk operations and file lookup. Even if we are using APC, the extension performs the `stat` operation on every file to check whether it has not been modified. Although this check can be disabled, sometimes we might not want to do so, or the administrator forbids us to do so.

Usage
=====

The API of the class is relatively simple:

~~~~
[php]
$dump = new Opl\Autoloader\Toolset\CoreDump();
$dump->addNamespace('Opl', './src/');
$dump->addNamespace('Zend', './src/');
$dump->addNamespace('Symfony', './src/');
$dump->loadCore('./core.txt');

$dump->exportRequireList('../web/requires.php');
$dump->exportConcatenated('../web/core.php');
$dump->exportConcatenated('../web/core2.php', true);
~~~~

If the second argument of `exportConcatenated()` is set to **true**, the method cuts off the file header comments. The concatenation is safe for both namespaced and non-namespaced code. Both of them can be freely mixed within the single core file.

> [information]
> You can also use the [opl:autoloader:core-dump-export][autoloader.cli] CLI command to generate the core files. The CLI command supports the OPA configuration files.